@model OurDestination.Models.Transection

@{
    //ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card p-5">
                    <h4 class="text-uppercase text-center">Transection @ViewBag.Title</h4>
                    <hr />
                    @if (Model != null)
                    {
                        @Html.HiddenFor(model => model.TransectionId);

                    }
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <span>@Html.LabelFor(model => model.MemberId, "MemberId", htmlAttributes: new { @class = "control-label", id = "MemberName" })</span>
                                <span>
                                    @Html.DropDownList("MemberId", null, "Select Member", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.MemberId, "", new { @class = "text-danger" })
                                </span>
                            </div>
                        </div>

                        <div class="col">
                            <div class="form-group">
                                <span>@Html.LabelFor(model => model.MonthId, htmlAttributes: new { @class = "control-label" })</span>
                                <span>
                                    @Html.DropDownList("MonthId",null,"Select Month", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.MonthId, "", new { @class = "text-danger" })
                                </span>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <span>@Html.LabelFor(model => model.TransectionAmount, htmlAttributes: new { @class = "control-label" })</span>
                                <span>
                                    @Html.EditorFor(model => model.TransectionAmount, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TransectionAmount, "", new { @class = "text-danger" })
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <span>@Html.LabelFor(model => model.GivenDate, htmlAttributes: new { @class = "control-label" })</span>
                                <span>
                                    @Html.EditorFor(model => model.GivenDate, new { htmlAttributes = new { @class = "form-control", id = "GivenDate" } })
                                    @Html.ValidationMessageFor(model => model.GivenDate, "", new { @class = "text-danger" })
                                </span>
                            </div>
                        </div>

                        <div class="col">
                            <div class="form-group">
                                <span>@Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label" })</span>
                                <span>
                                    @Html.EditorFor(model => model.EntryDate, new { htmlAttributes = new { @class = "form-control", id = "EntryDate" } })
                                    @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row text-center">

                        <div class="col">
                            @if (ViewBag.Title == "Create")
                            {
                                <input type="submit" value="Create" class="btn btn-primary" />
                            }
                            else if (ViewBag.Title == "Edit")
                            {
                                <input type="submit" value="Edit" class="btn btn-warning" />
                            }
                            else if (ViewBag.Title == "Delete")
                            {
                                <input type="button" class="btn btn-danger" value="Delete" onclick="Transection_Delete()" />
                            }
                            <span>
                                @Html.ActionLink("Back", "Index", null, null, new { @class = "btn btn-info" })
                            </span>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script type="text/javascript">

    //$("#MemberName").select2();

    //$("#MemberName").select2({}).on("select2:select", function (e) {

    //})

    $('#DestinationId').select2({})
        .on("select2:select", function (e) {
            if ($('#DestinationId').val() > 0) {

                //alert('enter');
                //alert('masterlcidchange');
                //MasterLC_Info();
                Buyer_Info();
                BuyerWiseDiscount();
                //alert('buyer info');
                NotifyParty_Info();
                //ExportOrderSummaryGrid();
                //multInputsexportinvoice();
            }
            else {
                alert('Please Select Destination Information First.')
            }

            // have to fire our own change event because value set in JS
            // TODO capture ahead of time instead of using default
            //$(this).trigger('change');
            console.log("select2:select")
        });

    $("#GivenDate,#EntryDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');

        },
        dateFormat: "dd-M-yy",
        changeMonth: true,
        changeYear: true,
        yearRange: "1985:2020"
    });

    $("#EntryDate").val(CurrentDate());

    function CurrentDate() {
        var date = new Date();
        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
            "Aug", "Sep", "Oct", "Nov", "Dec"];
        var val = date.getDate() + "-" + months[date.getMonth()] + "-" + date.getFullYear();
        return val;
    }


</script>